# Python的参数默认传递的是内存地址
v1 = [11, 22, 33]
v2 = [11, 22, 33]
print(id(v1), id(v2))  # 内存地址是不一样的


# 参数的默认值
# 在函数内存中会维护一块区域存储 [1,2,666,666,666] 100010001
def func(a1, a2=[1, 2]):
    a2.append(666)
    print(a1, a2)


# a1=100
# a2 -> 100010001
func(100)  # 100  [1,2,666]

# a1=200
# a2 -> 100010001
func(200)  # 200 [1,2,666,666]

# a1=99
# a2 -> 1111111101
func(99, [77, 88])  # 66 [177,88,666]

# a1=300
# a2 -> 100010001
func(300)  # 300 [1,2,666,666,666]


# 动态参数：在执行函数时也可以使用动态参数
def fun(a1, a2):
    print(a1, a2)


fun(*[11, 22])  # 使用动态参数可以拆分列表或字典
fun(**{'a1': 11, 'a2': 12})


def fun1(*args, **kwargs):
    print(args, kwargs)


fun1(*[11, 22, 33], **{'a1': 11, 'a2': 12})  # (11, 22, 33) {'a1': 11, 'a2': 12}  一个是元组，一个是字典


# 函数和函数名
# 函数做元素
def fun3():
    return 123


# 函数是可以被哈希的，可以作为集合的元素，字典的键
lst = [fun3, fun3()]
print(lst)  # <function fun3 at 0x00000261CF05FA60>  打印出来是一个函数

result = lst[0]()  # 同时也可以在后面加括号调运这个函数
print(result)
# 例如：要开发一个类似于微信的功能。  可以将函数作为字典或列表
# 例如：某个特定情况，要实现发送短信、微信、邮件。


# 函数名可以被其他变量代指，比如上述列表
# 但是如果将函数名改成其他变量，那么就不在指向函数
# 不要将函数名定义成Python自带的函数名，比如len
